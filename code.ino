/**
   * @file KSR-ATT85.ino
   * @brief Communication entre l'afficheur STONE HMI, Arduino MEGA et action des casiers du B.R.A.S
   * documentation : https://docs.ks-infinite.fr/bras/
   * github : https://github.com/kerogs/bras/
   * @author Kerogs
   * @version 1.0.2
   * @date 29/05/2024
   * @copyright Copyright - B.R.A.S, Kerogs Infinite, Lycée Condorcet - Stiring-Wendel
   */

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <TEA5767Radio.h>

// SSD1306
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// TEA5767
TEA5767Radio radio = TEA5767Radio();

// Potentiometer
#define POTENTIOMETER A1

// 'logo-vertical_bmp', 128x32px
const unsigned char ks_logo_vertical_bmp[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x81, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xc7, 0xff, 0xbf,
  0x00, 0xff, 0x80, 0x30, 0xff, 0xc7, 0xc3, 0xc0, 0x3c, 0x03, 0xfc, 0x01, 0xff, 0x00, 0xfc, 0x07,
  0x00, 0xff, 0x80, 0x60, 0x7f, 0xc7, 0x87, 0xc0, 0x3c, 0x01, 0xf8, 0x00, 0xfc, 0x00, 0x78, 0x03,
  0x00, 0xfe, 0x00, 0xc0, 0x1f, 0xc7, 0x0f, 0xc7, 0xfc, 0x30, 0xf0, 0x00, 0x78, 0x00, 0x78, 0x63,
  0x00, 0xfe, 0x01, 0x80, 0x0f, 0xc6, 0x1f, 0xc7, 0xfc, 0x78, 0xf1, 0xf8, 0x78, 0x7f, 0xf8, 0xff,
  0x00, 0xfc, 0x03, 0x00, 0x0f, 0xc4, 0x3f, 0xc7, 0xfc, 0x78, 0xe1, 0xfc, 0x38, 0xff, 0xf8, 0x7f,
  0x00, 0xf8, 0x06, 0x70, 0x1f, 0xc0, 0x7f, 0xc0, 0x7c, 0x30, 0xe3, 0xfc, 0x30, 0xf0, 0x38, 0x1f,
  0x00, 0xf0, 0x0c, 0xfc, 0x3f, 0xc0, 0x7f, 0xc0, 0x7c, 0x01, 0xe3, 0xfe, 0x30, 0xf0, 0x3c, 0x07,
  0x00, 0xe0, 0x18, 0xfe, 0xff, 0xc0, 0x3f, 0xc0, 0x7c, 0x03, 0xe3, 0xfe, 0x30, 0xf0, 0x3f, 0x03,
  0x00, 0xc0, 0x30, 0xff, 0xff, 0xc2, 0x1f, 0xc7, 0xfc, 0x23, 0xe3, 0xfc, 0x38, 0xfe, 0x3f, 0xc3,
  0x00, 0x80, 0x60, 0x7f, 0xff, 0xc7, 0x0f, 0xc7, 0xfc, 0x61, 0xe1, 0xfc, 0x78, 0x7e, 0x3f, 0xe1,
  0x00, 0x00, 0xc0, 0x1f, 0xff, 0xc7, 0x8f, 0xc7, 0xfc, 0x70, 0xf0, 0xf8, 0x78, 0x3c, 0x3d, 0xe3,
  0x00, 0x01, 0xc0, 0x03, 0xff, 0xc7, 0x87, 0xc0, 0x3c, 0x78, 0xf8, 0x00, 0xfc, 0x00, 0x38, 0x03,
  0x00, 0x00, 0xe0, 0x00, 0xff, 0xc7, 0xc3, 0xc0, 0x3c, 0x78, 0x7c, 0x01, 0xfe, 0x00, 0x78, 0x07,
  0x00, 0x00, 0xf0, 0x00, 0x7f, 0xc7, 0xe3, 0xc0, 0x3c, 0x7c, 0x3e, 0x07, 0xff, 0x81, 0xfe, 0x0f,
  0x00, 0x00, 0x78, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x3e, 0x00, 0x1f, 0xc7, 0x87, 0xc7, 0x80, 0x71, 0xe1, 0xf1, 0xe3, 0x80, 0x0e, 0x03,
  0x00, 0x00, 0x1f, 0x80, 0x1f, 0xc7, 0x83, 0xc7, 0x80, 0x71, 0xe0, 0xf1, 0xe3, 0x80, 0x0e, 0x03,
  0x00, 0x20, 0x1f, 0xf0, 0x0f, 0xc7, 0x83, 0xc7, 0x87, 0xf1, 0xe0, 0xf1, 0xe3, 0x80, 0x0e, 0x3f,
  0x00, 0x70, 0x0f, 0xf8, 0x0f, 0xc7, 0x81, 0xc7, 0x8f, 0xf1, 0xe0, 0x71, 0xe3, 0xf8, 0xfe, 0x7f,
  0x00, 0xf0, 0x07, 0xf8, 0x0f, 0xc7, 0x80, 0xc7, 0x8f, 0xf1, 0xe0, 0x71, 0xe3, 0xf8, 0xfe, 0x7f,
  0x00, 0xf8, 0x03, 0xf8, 0x0f, 0xc7, 0x80, 0xc7, 0x80, 0xf1, 0xe0, 0x31, 0xe3, 0xf8, 0xfe, 0x07,
  0x00, 0xfc, 0x03, 0xf8, 0x0f, 0xc7, 0x8c, 0x47, 0x80, 0xf1, 0xe2, 0x11, 0xe3, 0xf8, 0xfe, 0x07,
  0x00, 0xfc, 0x01, 0x20, 0x0f, 0xc7, 0x8c, 0x47, 0x80, 0xf1, 0xe3, 0x11, 0xe3, 0xf8, 0xfe, 0x07,
  0x00, 0xfe, 0x00, 0x80, 0x1f, 0xc7, 0x8e, 0x07, 0x8f, 0xf1, 0xe3, 0x01, 0xe3, 0xf8, 0xfe, 0x3f,
  0x00, 0xff, 0x00, 0xc0, 0x3f, 0xc7, 0x8e, 0x07, 0x8f, 0xf1, 0xe3, 0x81, 0xe3, 0xf8, 0xfe, 0x7f,
  0x00, 0xff, 0x80, 0x40, 0x3f, 0xc7, 0x8f, 0x07, 0x8f, 0xf1, 0xe3, 0xc1, 0xe3, 0xf8, 0xfe, 0x3f,
  0x00, 0xff, 0x80, 0x20, 0xff, 0xc7, 0x8f, 0x07, 0x8f, 0xf1, 0xe3, 0xc1, 0xe3, 0xf8, 0xfe, 0x03,
  0x00, 0xff, 0xc0, 0x11, 0xff, 0xc7, 0x8f, 0x87, 0x8f, 0xf1, 0xe3, 0xe1, 0xe3, 0xf8, 0xfe, 0x03,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 528)
const int ks_allArray_LEN = 1;
const unsigned char* ks_allArray[1] = {
  ks_logo_vertical_bmp
};


// don't change
float frequency = 90.7;
char* station = "";

// Recursive filter
float filteredValue = 0.0;
const float alpha = 0.3;  // Smoothing factor, between 0 and 1


void setup() {
  Serial.begin(9600);
  delay(1000);
  Wire.begin();

  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;  // Don't proceed, loop forever
  }

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);

  display.display();
  display.clearDisplay();
  display.display();
  display.drawBitmap(0, 0, ks_logo_vertical_bmp, 128, 32, 1);
  display.display();

  delay(1000);
  display.clearDisplay();
  display.display();
  display.print("...");
  display.display();

  delay(500);

  Serial.println("END");
  display.print("END");
  display.display();
  delay(500);
  display.clearDisplay();
  display.display();
}

// ---------- LOOP ----------
void loop() {
  int potentiometerValue = analogRead(POTENTIOMETER);

  // Apply recursive filter
  filteredValue = alpha * potentiometerValue + (1 - alpha) * filteredValue;
  Serial.print("Frequence:");
  Serial.println(frequency);

  float frequency = map(filteredValue, 0, 1023, 870, 1100) / 10.0;

  float potentiometerValueOscillo = filteredValue / 10;
  Serial.print("Potentiometer:");
  Serial.println(potentiometerValueOscillo);

  Serial.print("Frequence+filtre:");
  Serial.println(frequency);

  fmList(frequency);

  screenUI(frequency, station);
  radio.setFrequency(frequency);

  screenClear();
}

// ---------- FM LIST ----------
void fmList(float frequency) {

  if (frequency == 90.7) {
    station = "FRANCE CULTURE";
  } else if (frequency == 93.6) {
    station = "FRANCE MUSIQUE";
  } else {
    station = "[Not found...]";
  }
}

// ---------- screenUI ----------
void screenUI(float frequency, char* station) {
  // Afficher la station
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print(station);

  // Afficher la fréquence
  display.setTextSize(2);
  display.setCursor(0, 16);
  display.print(frequency);
  display.print(" MHz");
}

// ---------- screenClear ----------
void screenClear() {
  display.display();
  // delay(2000);
  display.clearDisplay();
}